add_library(base
	concurrent/platform/PeriodicTask_linux.cpp
	concurrent/platform/SyncTask_linux.cpp
	concurrent/platform/Thread_linux.cpp
	concurrent/PeriodicTask.cpp
	concurrent/SingleTask.cpp
	concurrent/SyncTask.cpp
	concurrent/Thread.cpp
	concurrent/ThreadPool.cpp
	concurrent/ThreadPoolManager.cpp
	concurrent/ThreadPoolThread.cpp
	distributions/Exponential.cpp
	distributions/Lognormal.cpp
	distributions/Pareto.cpp
	distributions/Uniform.cpp
	edl_parser/EdlParser.cpp
	edl_parser/EdlScanner.cpp
	functors/Function.cpp
	functors/Functions.cpp
	functors/Table.cpp
	functors/Tables.cpp
	io/IoAdapter.cpp
	io/IoData.cpp
	io/IoDevice.cpp
	io/IoHandler.cpp
	network/NetHandler.cpp
	network/PosixHandler.cpp
	network/TcpClient.cpp
	network/TcpHandler.cpp
	network/TcpServerMultiple.cpp
	network/TcpServerSingle.cpp
	network/UdpBroadcastHandler.cpp
	network/UdpMulticastHandler.cpp
	network/UdpUnicastHandler.cpp
	osg/math.cpp
	osg/Matrixd.cpp
	osg/MatrixDecomposition.cpp
	osg/Matrixf.cpp
	osg/Quat.cpp
	ubf/AbstractAction.cpp
	ubf/AbstractBehavior.cpp
	ubf/AbstractState.cpp
	ubf/Agent.cpp
	ubf/Arbiter.cpp
	units/Angles.cpp
	units/AngularVelocity.cpp
	units/Areas.cpp
	units/Density.cpp
	units/Distances.cpp
	units/Energies.cpp
	units/FlowRate.cpp
	units/Forces.cpp
	units/Frequencies.cpp
	units/LinearVelocity.cpp
	units/Masses.cpp
	units/Powers.cpp
	units/Times.cpp
	units/Volumes.cpp
	util/platform/system_linux.cpp
	util/lfi.cpp
	util/math_utils.cpp
	util/nav_utils.cpp
	util/navDR_utils.cpp
	util/osg_utils.cpp
	util/str_utils.cpp
	util/system_utils.cpp
	Boolean.cpp
	Cie.cpp
	Cmy.cpp
	Color.cpp
	Complex.cpp
	Component.cpp
	Decibel.cpp
	EarthModel.cpp
	factory.cpp
	FileReader.cpp
	Float.cpp
	Hls.cpp
	Hsva.cpp
	Hsv.cpp
	Identifier.cpp
	Integer.cpp
	LatLon.cpp
	List.cpp
	Locus.cpp
	Matrix.cpp
	MetaObject.cpp
	MonitorMetrics.cpp
	Number.cpp
	Object.cpp
	Operators.cpp
	Pair.cpp
	PairStream.cpp
	Rgba.cpp
	Rgb.cpp
	Rng.cpp
	SlotTable.cpp
	Stack.cpp
	Statistic.cpp
	StateMachine.cpp
	String.cpp
	Timers.cpp
	Transforms.cpp
	Vectors.cpp
	Yiq.cpp
)

target_include_directories (
	base
	PUBLIC
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
	$<INSTALL_INTERFACE:include>
)

install (
	TARGETS base
)

install (
	DIRECTORY
		${CMAKE_CURRENT_SOURCE_DIR}/include/
	DESTINATION include
	FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp"
)
